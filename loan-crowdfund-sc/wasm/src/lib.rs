// Code generated by the multiversx-sc multi-contract system. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

// Init:                                 1
// Endpoints:                           23
// Async Callback:                       1
// Total number of exported functions:  25

#![no_std]

// Configuration that works with rustc < 1.73.0.
// TODO: Recommended rustc version: 1.73.0 or newer.
#![feature(lang_items)]

multiversx_sc_wasm_adapter::allocator!();
multiversx_sc_wasm_adapter::panic_handler!();

multiversx_sc_wasm_adapter::endpoints! {
    loan_crowdfund_sc
    (
        init => init
        invest => invest
        withdraw => withdraw
        claim => claim
        distributeRepayment => distribute_repayment
        addAdmins => add_admins
        removeAdmins => remove_admins
        getAdminList => admin_list
        getWithdrawFromLoanTimeSpan => withdraw_from_loan_timespan
        getLoanShareTokenIdentifier => loan_share_token_identifier
        getCrowdfundingState => crowdfunding_state
        getSourceLoanRepaymentScAddress => source_loan_repayment_sc_address
        getIsKycCompliant => get_is_kyc_compliant
        registerSuccessfulKyc => register_successful_kyc
        getWhitelistedUsers => whitelisted_users
        create => create_project
        cancel => cancel_project
        adminDistributeRepayment => admin_distribute_repayments
        issueAndSetRoles => issue_and_set_roles
        claimLoanFunds => claim_loan_funds
        getExpectedInterest => get_expected_interest
        getExpectedLateFees => get_expected_late_fees
        getTotalAmount => get_total_amount
        getFundingState => get_funding_state
    )
}

multiversx_sc_wasm_adapter::async_callback! { loan_crowdfund_sc }
